implement main
    open core, file, stdio

domains
    disease = leukemia; bone_cancer; hiv; flu; measles; dislocation; arthrosis.
    age = integer*.

class facts - clinicDb
    patient : (string Номеркарты, string Фиопациента, integer Возраст, string Телефон, string Адрес).
    doctor : (string Номерврача, string Фиоврача, string Специализация, string Id, integer Количество_пациентов).
    appointment : (string Специализация, string Фиопациента, disease Диагноз, string Дата, string Больничный, string Назначение,
        real Начальная_стоимость).
    treating_doctor : (string Номерврача, string Номеркарты).
    age : (integer*).

class predicates
    прошел_врача_в_эту_дату : (string Фиоврача, string Фиопациента, string Дата) nondeterm anyflow.
    диагноз : (string Фиопациента, disease Диагноз, string Датаприема, string Назначение) nondeterm anyflow.
    врач_и_его_пациенты : (string Фиоврача, string Специализация, string Фиопациента, disease Диагноз) nondeterm anyflow.
    кому_больничный : (string Больничный, string Фиопациента, disease Диагноз) nondeterm anyflow.
    кому_был_поставлен_данный_диагноз : (disease Диагноз, string Фиопациента, string Датаприема, integer Возраст) nondeterm anyflow.
    количество_пациентов : (string Фиоврача, integer Количество_пациентов, integer Новколичество_пациентов) nondeterm anyflow.
    скидка_на_лечение : (real Процент, real Конечная_стоимость, real Начальная_стоимость, string Фиопациента) nondeterm anyflow.
    sum_count : (age List, integer Sum, integer Kol) nondeterm anyflow.
    rating_avg : (age List, real Avg) nondeterm anyflow.
    indexof : (integer, age, integer [out]).
    indexof1 : (integer, age, integer, integer [out]).
    write_list : (integer*) nondeterm anyflow.
    max : (age, integer [out]) nondeterm.
    min : (age, integer [out]) nondeterm.

clauses
    прошел_врача_в_эту_дату(Специализация, Фиопациента, Дата) :-
        appointment(Специализация, Фиопациента, _, Дата, _, _, _).

    диагноз(Фиопациента, Диагноз, Дата, Назначение) :-
        appointment(_, Фиопациента, Диагноз, Дата, _, Назначение, _).

    врач_и_его_пациенты(Фиоврача, Специализация, Фиопациента, Диагноз) :-
        doctor(Номерврача, Фиоврача, Специализация, _, _),
        appointment(Специализация, Фиопациента, Диагноз, _, _, _, _),
        patient(Номеркарты, Фиопациента, _, _, _),
        treating_doctor(Номерврача, Номеркарты).

    кому_больничный(Больничный, Фиопациента, Диагноз) :-
        appointment(_, Фиопациента, Диагноз, _, Больничный, _, _).

    кому_был_поставлен_данный_диагноз(Диагноз, Фиопациента, Дата, Возраст) :-
        patient(_, Фиопациента, Возраст, _, _),
        appointment(_, Фиопациента, Диагноз, Дата, _, _, _).

    количество_пациентов(Фиоврача, Количество_пациентов, Новколичество_пациентов) :-
        doctor(_, Фиоврача, _, _, Количество_пациентов),
        Новколичество_пациентов = Количество_пациентов + 5.

    скидка_на_лечение(Процент, Конечная_стоимость, Начальная_стоимость, Фиопациента) :-
        appointment(_, Фиопациента, _, _, _, _, Начальная_стоимость),
        Конечная_стоимость = Начальная_стоимость * (100 - Процент) / 100.

    rating_avg(L, Avg) :-
        sum_count(L, S, C),
        Avg = S / C.
    sum_count([], 0, 0).
    sum_count([H | T], St + H, Ct + 1) :-
        sum_count(T, St, Ct).

    indexof(X, L, N) :-
        indexof1(X, L, 1, N).
    indexof1(_, [], _, 0) :-
        !.
    indexof1(X, [X | _], N, N) :-
        !.
    indexof1(X, [_ | T], K, N) :-
        indexof1(X, T, K + 1, N).

    write_list([H | T]) :-
        write(H, " "),
        write_list(T).
    max([X], X).
    max([H | Tail], H) :-
        max(Tail, M),
        H > M,
        !.
    max([_ | Tail], M) :-
        max(Tail, M).

    min([Y], Y).
    min([H | Tail], H) :-
        min(Tail, M),
        H < M,
        !.
    min([_ | Tail], M) :-
        min(Tail, M).

clauses
    run() :-
        console::init(),
        reconsult("../datadinara.txt", clinicDb),
        fail.

    run() :-
        nl,
        прошел_врача_в_эту_дату("virologist", Фиопациента, Дата),
        stdio::write("Информация о пациенте ", Фиопациента, ": он (она) был(а) на приеме у врача со специализацией ", "virologist", " в день ", Дата,
            "\n"),
        fail.

    run() :-
        nl,
        диагноз(Фиопациента, Диагноз, Дата, Назначение),
        stdio::write("Пациенту ", Фиопациента, " был поставлен диагноз ", Диагноз, " и ", Назначение, " по дате ", Дата, "\n"),
        fail.

    run() :-
        nl,
        врач_и_его_пациенты("Kuznetsov Pavel Andreevich", Специализация, Фиопациента, Диагноз),
        stdio::write("Лечащим врачом пациента ", Фиопациента, " является ", "Kuznetsov Pavel Andreevich", " по специализации ", Специализация,
            ". Им был поставлен диагноз ", Диагноз, "\n"),
        fail.

    run() :-
        nl,
        кому_больничный(Больничный, Фиопациента, Диагноз),
        stdio::write("Был ли выписан больничный пациенту ", Фиопациента, "? ", Больничный, ". Поставленный диагноз: ", Диагноз, "\n"),
        fail.
    run() :-
        nl,
        stdio::write("Введите диагноз: "),
        X = stdio::read(),
        X = hasDomain(disease, X),
        кому_был_поставлен_данный_диагноз(X, Фиопациента, Дата, Возраст),
        stdio::write("Диагноз ", X, " был поставлен пациенту с именем ", Фиопациента, " возрастом ", Возраст, " лет, по дате ", Дата, "\n"),
        fail.

    run() :-
        nl,
        количество_пациентов(Фиоврача, Количество_пациентов, Новколичество_пациентов),
        stdio::write("У врача ", Фиоврача, " было пациентов  ", Количество_пациентов, ". А стало ", Новколичество_пациентов, ". \n"),
        fail.

    run() :-
        nl,
        stdio::write("Введите процент скидки на лечение: "),
        X = stdio::read(),
        скидка_на_лечение(X, Конечная_стоимость, Начальная_стоимость, Фиопациента),
        stdio::write("Лечение пациента ", Фиопациента, " стоило ", Начальная_стоимость, " тысяч рублей. А теперь будет стоить ", Конечная_стоимость,
            " тысяч рублей. Данная цена указана с учетом скидки в ", X, " процентов. \n"),
        fail.

    run() :-
        nl,
        age(L),
        sum_count(L, S, C),
        rating_avg(L, Avg),
        write("Средний возраст пациентов: ", Avg, "\n"),
        write("Всего количество пацинтов в больнице: ", C, "\n"),
        fail.

    run() :-
        nl,
        age(L),
        max(L, X),
        min(L, Y),
        write("Максимальный возраст по больнице: ", X, "\n"),
        write("Минимальный возраст по больнице: ", Y, "\n"),
        fail.

    run() :-
        nl,
        stdio::write("Чтобы узнать, есть ли пациент с определенным возрастом, введите его возраст: "),
        X = stdio::read(),
        age(L),
        indexof(X, L, N),
        if N > 0 then
            stdio::write("Возраст ", X, " присутствует в больнице. \n")
        else
            stdio::write("Возраст ", X, " отсутствует в больнице. \n")
        end if,
        fail.

    run() :-
        nl,
        age(L),
        stdio::write("Список возрастов всех пациентов в больнице: \n"),
        write_list(L),
        stdio::write("\n"),
        nl,
        fail.

    run() :-
        stdio::write("End test\n").

end implement main

goal
    console::runUtf8(main::run).
